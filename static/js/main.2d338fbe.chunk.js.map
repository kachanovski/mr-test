{"version":3,"sources":["api/api.ts","store/dataReducer.ts","App.tsx","serviceWorker.ts","store/store.ts","index.tsx"],"names":["api","axios","get","initialState","data","valueInputText","isRegister","filteredData","error","setFilteredDataAC","type","payload","setErrorAC","App","useSelector","state","dispatch","useDispatch","useEffect","then","res","catch","e","console","log","className","onChange","setValueInputTextAC","currentTarget","value","setIsRegisterAC","checked","onClick","filter","i","toLocaleLowerCase","includes","Number","length","map","id","key","Boolean","window","location","hostname","match","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yQAEaA,EACA,WACL,OAAQC,IAAMC,IAAI,uECEpBC,EAAe,CACjBC,KAAM,GACNC,eAAgB,GAChBC,YAAY,EACZC,aAAc,GACdC,MAAO,IAyCEC,EAAoB,SAACF,GAAD,MAAkC,CAC/DG,KAAM,gCAAiCC,QAAS,CAACJ,kBAOxCK,EAAa,SAACJ,GAAD,MAAoB,CAC1CE,KAAM,8BAA+BC,QAAS,CAACH,WCUpCK,G,MA1DI,WAAO,IAAD,EAOjBC,aAA8C,SAAAC,GAAK,OAAIA,EAAMX,QAL7DC,EAFiB,EAEjBA,eACAD,EAHiB,EAGjBA,KACAE,EAJiB,EAIjBA,WACAE,EALiB,EAKjBA,MACAD,EANiB,EAMjBA,aAEES,EAAWC,cAEjBC,qBAAU,WACNF,GDwCqB,SAACA,GAE1B,OAAOhB,IACFmB,MAAK,SAACC,GACHJ,EAxBuC,CAC/CN,KAAM,uBAAwBN,KAuBHgB,EAAIhB,KAAKA,UAE/BiB,OAAM,SAACC,GACJC,QAAQC,IAAIF,WC9CjB,CAACN,IAwBJ,OACI,yBAAKS,UAAW,OACZ,yFACgB,2BAAOC,SAzBJ,SAACJ,GACxBN,EDoB2B,SAACX,GAAD,MAA6B,CAC5DK,KAAM,mCAAoCC,QAAS,CAACN,mBCrBvCsB,CAAoBL,EAAEM,cAAcC,SAwBYA,MAAOxB,IACvDG,GAEL,6KAC8B,2BAAOE,KAAM,WAAYgB,SA1BvC,SAACJ,GACrBN,EDyBuB,SAACV,GAAD,MAA0B,CACrDI,KAAM,oCAAqCC,QAAS,CAACL,eC1BxCwB,CAAgBR,EAAEM,cAAcG,WAyB6CA,QAASzB,KAE3F,gHAEI,4BAAQ0B,QAjBU,WAEpBhB,EAASP,EADfH,EACiCF,EAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEC,oBAAoBC,SAAS/B,EAAe8B,wBAC/D/B,EAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEE,SAAS/B,UAcrD,2DACA,4BAAQ2B,QA3BQ,WACpBK,OAAOhC,IACPW,EAASP,EAAkBL,EAAK6B,QAAO,SAAAC,GAAC,OAAIA,EAAEI,OAASD,OAAOhC,QAC9DW,EAASJ,EAAW,MAEpBI,EAASJ,EAAW,oHAsBhB,kHAGHL,EAAa+B,OAAS,EAAI/B,EAAagC,KAAI,SAACL,EAAGM,GAC5C,OAAO,yBAAKC,IAAKD,GAAKN,MACrB,kGCtDGQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mBCdFC,EAAWC,YAAgB,CAC3B5C,KHUuB,WAAmE,IAAlEW,EAAiE,uDAAzDZ,EAAc8C,EAA2C,uCACzF,OAAQA,EAAOvC,MACX,IAAK,uBACD,OAAO,eACAK,EADP,CAEIX,KAAM6C,EAAO7C,OAGrB,IAAK,gCACD,OAAO,eACAW,EADP,CAEIR,aAAc0C,EAAOtC,QAAQJ,eAGrC,IAAK,oCACL,IAAK,8BACL,IAAK,mCACD,OAAO,eACAQ,EADP,GAEOkC,EAAOtC,SAIlB,QACI,OAAOI,MG/BNmC,EAAQC,YAAYJ,EAAUK,YAAgBC,MAK3DV,OAAOO,MAAQA,ECLfI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUN,MAAOA,GACb,kBAAC,EAAD,QAIRO,SAASC,eAAe,SF4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd1C,OAAM,SAAAb,GACLe,QAAQf,MAAMA,EAAMwD,c","file":"static/js/main.2d338fbe.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const api = {\r\n    getData: () => {\r\n        return  axios.get('https://cors-anywhere.herokuapp.com/http://www.mrsoft.by/data.json')\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {api} from \"../api/api\";\r\n\r\n\r\nexport type DataInitStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    data: [] as string[],\r\n    valueInputText: '' as string,\r\n    isRegister: false,\r\n    filteredData: [] as string[],\r\n    error: ''\r\n\r\n}\r\n\r\nexport const dataReducer = (state = initialState, action: ActionsType): DataInitStateType => {\r\n    switch (action.type) {\r\n        case \"dataReducer/SET-DATA\": {\r\n            return {\r\n                ...state,\r\n                data: action.data\r\n            }\r\n        }\r\n        case \"dataReducer/SET-FILTERED-DATA\": {\r\n            return {\r\n                ...state,\r\n                filteredData: action.payload.filteredData\r\n            }\r\n        }\r\n        case \"redux/dataReducer/SET-IS-REGISTER\":\r\n        case \"redux/dataReducer/SET-ERROR\":\r\n        case \"dataReducer/SET-VALUE-INPUT-TEXT\": {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const setDataAC = (data: Array<string>) => ({\r\n    type: 'dataReducer/SET-DATA', data\r\n} as const)\r\n\r\nexport const setValueInputTextAC = (valueInputText: string) => ({\r\n    type: 'dataReducer/SET-VALUE-INPUT-TEXT', payload: {valueInputText}\r\n} as const)\r\n\r\nexport const setFilteredDataAC = (filteredData: Array<string>) => ({\r\n    type: 'dataReducer/SET-FILTERED-DATA', payload: {filteredData}\r\n} as const)\r\n\r\nexport const setIsRegisterAC = (isRegister: boolean) => ({\r\n    type: 'redux/dataReducer/SET-IS-REGISTER', payload: {isRegister}\r\n} as const)\r\n\r\nexport const setErrorAC = (error: string) => ({\r\n    type: 'redux/dataReducer/SET-ERROR', payload: {error}\r\n} as const)\r\n\r\nexport const getData = () => (dispatch: Dispatch) => {\r\n\r\n    return api.getData()\r\n        .then((res) => {\r\n            dispatch(setDataAC(res.data.data))\r\n        })\r\n        .catch((e) => {\r\n            console.log(e)\r\n        })\r\n}\r\n\r\n\r\ntype setDataType = ReturnType<typeof setDataAC>\r\ntype setValueInputTextType = ReturnType<typeof setValueInputTextAC>\r\ntype setFilteredDataType = ReturnType<typeof setFilteredDataAC>\r\ntype setIsRegisterType = ReturnType<typeof setIsRegisterAC>\r\ntype setErrorACType = ReturnType<typeof setErrorAC>\r\n\r\nexport type ActionsType = setDataType\r\n    | setValueInputTextType\r\n    | setFilteredDataType\r\n    | setIsRegisterType\r\n    | setErrorACType\r\n\r\n","import React, {ChangeEvent, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    DataInitStateType,\r\n    getData,\r\n    setErrorAC,\r\n    setFilteredDataAC,\r\n    setIsRegisterAC,\r\n    setValueInputTextAC\r\n} from \"./store/dataReducer\"\r\nimport {RootStateType} from \"./store/store\"\r\nimport './App.css'\r\n\r\nexport const App = () => {\r\n    const {\r\n        valueInputText,\r\n        data,\r\n        isRegister,\r\n        error,\r\n        filteredData\r\n    } = useSelector<RootStateType, DataInitStateType>(state => state.data)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getData())\r\n    }, [dispatch])\r\n\r\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setValueInputTextAC(e.currentTarget.value))\r\n    }\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setIsRegisterAC(e.currentTarget.checked))\r\n    }\r\n\r\n    const onClickFilterLength = () => {\r\n        if (Number(valueInputText)) {\r\n            dispatch(setFilteredDataAC(data.filter(i => i.length > Number(valueInputText))))\r\n            dispatch(setErrorAC(''))\r\n        } else {\r\n            dispatch(setErrorAC('Некорректные данные'))\r\n        }\r\n    }\r\n\r\n    const onClickSubStringValue = () => {\r\n        isRegister\r\n            ? dispatch(setFilteredDataAC(data.filter(i => i.toLocaleLowerCase().includes(valueInputText.toLocaleLowerCase()))))\r\n            : dispatch(setFilteredDataAC(data.filter(i => i.includes(valueInputText))))\r\n    }\r\n\r\n    return (\r\n        <div className={'app'}>\r\n            <div>\r\n                Поле ввода: <input onChange={onChangeInputValue} value={valueInputText}/>\r\n                {error}\r\n            </div>\r\n            <div>\r\n                Чувсвительность к регисру:<input type={'checkbox'} onChange={onChangeHandler} checked={isRegister}/>\r\n            </div>\r\n            <div>\r\n                Фильтровать по:\r\n                <button onClick={onClickSubStringValue}> подстроке</button>\r\n                <button onClick={onClickFilterLength}>количеству символов</button>\r\n            </div>\r\n\r\n            {filteredData.length > 0 ? filteredData.map((i, id) => {\r\n                return <div key={id}>{i}</div>\r\n            }) : 'Ничего не найдено'}\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunkMiddleWare from \"redux-thunk\";\r\nimport {dataReducer} from \"./dataReducer\";\r\n\r\nlet reducers = combineReducers({\r\n    data: dataReducer\r\n});\r\n\r\nexport const store = createStore(reducers, applyMiddleware(thunkMiddleWare));\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>;\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <App />\r\n      </Provider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}